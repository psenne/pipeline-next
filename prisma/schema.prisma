generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./data.db"
}

model Candidate {
    id                String    @id @default(uuid())
    firstname         String?
    lastname          String?
    emailaddress      String?
    telephone         String?
    found_by          String?
    interview_date    DateTime?
    level             String?
    loi_status        String?
    notes             String?
    loi_sent_date     DateTime?
    status            String?
    skill             String?
    salary            String?
    resume_text       String?
    preferedLocation  String?
    archived          Boolean?
    currentContract   Contract? @relation(fields: [currentContractId], references: [id])
    currentContractId Int?      @unique
    current_company   String?
    loi_sent_by       Int?
    createdBy         User?     @relation(fields: [createdById], references: [id])
    createdById       Int?
    createdAt         DateTime? @default(now())
    modifiedBy        User?     @relation(fields: [modifiedById], references: [id])
    modifiedById      Int?
    updatedAt         DateTime? @default(now())

    @@map("candidates")
}

model Comment {
    id           String    @id @default(uuid())
    text         String?
    candidate    Int?
    createdBy    User?     @relation(fields: [createdById], references: [id])
    createdById  Int?
    createdAt    DateTime? @default(now())
    modifiedBy   User?     @relation(fields: [modifiedById], references: [id])
    modifiedById Int?
    updatedAt    DateTime? @default(now())

    @@map("comments")
}

model Contract {
    id                    String      @id @default(uuid())
    number                String?
    name                  String?
    pop                   String?
    potentialCandidates   Candidate?  @relation(fields: [potentialCandidateIds], references: [id])
    potentialCandidateIds Int?        @unique
    manager               Manager?    @relation(fields: [managerId], references: [id])
    managerId             Int?
    Candidate             Candidate[]

    @@map("contracts")
}

model Employee {
    id           String    @id @default(uuid())
    firstname    String
    lastname     String
    emailaddress String?
    telephone    String?
    found_by     String?
    level        String?
    salary       String?
    resume_text  String?
    hired_on     DateTime?
    birthday     DateTime?
    at_risk      Boolean?
    contract     Int?
    notes        String?
    title        String?
    createdBy    User?     @relation(fields: [createdById], references: [id])
    createdById  Int?
    createdAt    DateTime? @default(now())
    modifiedBy   User?     @relation(fields: [modifiedById], references: [id])
    modifiedById Int?
    updatedAt    DateTime? @default(now())

    @@map("employees")
}

model Flag {
    id          String    @id @default(uuid())
    candidate   Int?
    flag_note   String?
    active      Boolean?
    flagged_by  Int?
    createdBy   User?     @relation(fields: [createdById], references: [id])
    createdById Int?
    createdAt   DateTime? @default(now())

    @@map("flags")
}

model Manager {
    id       String     @id @default(uuid())
    name     String?
    email    String?
    sent_loi Int?
    Contract Contract[]

    @@map("managers")
}

model Position {
    id            String    @id @default(uuid())
    title         String?
    description   String?
    level         String?
    location      String?
    skill_summary String?
    position_id   String?
    contract      Int?
    authored_by   Int?
    modified_by   Int?
    published_at  DateTime?
    createdBy     User?     @relation(fields: [createdById], references: [id])
    createdById   Int?
    createdAt     DateTime? @default(now())
    modifiedBy    User?     @relation(fields: [modifiedById], references: [id])
    modifiedById  Int?
    updatedAt     DateTime? @default(now())

    @@map("positions")
}

model Submission {
    id           String    @id @default(uuid())
    position     Int?
    submitted_by Int?
    candidate    Int?
    createdBy    User?     @relation(fields: [createdById], references: [id])
    createdById  Int?
    createdAt    DateTime? @default(now())
    modifiedBy   User?     @relation(fields: [modifiedById], references: [id])
    modifiedById Int?
    updatedAt    DateTime? @default(now())

    @@map("submissions")
}

model Account {
    id                 String  @id @default(uuid())
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String?
    access_token       String?
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String?
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int  @map("user_id")

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(uuid())
    sessionToken String   @unique @map("session_token")
    userId       Int      @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id                 String       @id @default(uuid())
    name               String?
    email              String?      @unique
    emailVerified      DateTime?    @map("email_verified")
    image              String?
    role               String?
    createdAt          DateTime     @default(now()) @map(name: "created_at")
    updatedAt          DateTime     @updatedAt @map(name: "updated_at")
    accounts           Account[]
    sessions           Session[]
    comments           Comment[]
    createdCandidates  Candidate[]
    updatedCandidates  Candidate[]
    createdEmployees   Employee[]
    updatedEmployees   Employee[]
    flags              Flag[]
    createdPositions   Position[]
    updatedPositions   Position[]
    createdSubmissions Submission[]

    @@map(name: "users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
